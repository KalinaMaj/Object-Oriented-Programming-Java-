/**A program that can encrypt and decrypt a message using
 * simple columnar transposition encryption algorithm.
 * An input string from a text file is read, and a new string is
 * generated by encrypting or decrypting the message, depending on whether the 
 * string starts with a E (encrypt) or D (decrypt).
 * 
 * @author Kalina Majewska
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class Project1{
	
	public static void main (String[] args) throws FileNotFoundException{  //main method throws exception if input/output file doesn't exist.
		
		//initiating the text files that we will input from and output into.
		File text = new File("Cryptography Project1 File.txt"); //for input
		PrintWriter out = new PrintWriter("output.txt"); //for output
		Scanner in = new Scanner(text); //will work with the input file using Scanner class
		
		while(in.hasNextLine()){
			String line = in.nextLine(); //read the next line in the input text
			char letter = line.charAt(0); //determine first character of the line
			if(letter == 'E'){
				String message = encrypt(line); //encrypt message
				out.println(message); //output the new message into the text file
			}
			if(letter == 'D'){
				String newMessage = decrypt(line); //decrypt message
				out.println(newMessage);
			}
		} //while
		
		//closing files
		in.close();
		out.close();
	}//main
	
	
	/**Next two methods encrypt and decrypt messages in the text file based on the first character it starts with 
	 * The methods input a string from the text file, and output a new string after its encryption/decryption.
	 * 
	 * @param e
	 */
	public static String encrypt(String e){
		String message = "Encryption: "; 
		String[] EncryptString = e.split("");
		int column = Integer.parseInt(EncryptString[1]); //get the number of columns from string in the text file
		int row = e.length()/column;
		int i = 2;
		char[][] en = new char[row][column+1];  //calculate row to make sure the number of columns fits the whole string into each row
		
		//create a 2D array of each character from the input string.
		for(int a=0; a<row; a++){
			for(int j=0; j<column; j++){
				if(EncryptString[i].equals("*"))
					en[a][j] = '\u0000';
				else if(EncryptString[i].equals(null))
					en[a][j] = 'Z';
				else{
					en[j][a] = e.charAt(i);  //Fill array en with the i'th character of the input string one row at a time
					i++;
				}
			}
		}
		
		//read each character from the 2D array column by column to transpose the encrypted message.
		for(int c=0; c<column; c++){
			for(int r=0; r<en[column].length; r++){
				message = message + String.valueOf(en[c][r]); 
			}
		}
		return message;
	} //encrypt
	
	/**
	 * @param d
	 */
	public static String decrypt(String d){
		String message = "Decryption: "; 
		String[] DecryptString = d.split("");
		int column = Integer.parseInt(DecryptString[1]); 
		int row = d.length()/column;
		int i = 2;
		char[][] dc = new char[row][column];  
		
		//create a 2D array of each character from the input string.
		for(int a=0; a<column; a++){
			for(int j=0; j<row; j++){
				if(DecryptString[i].equals("Z") || DecryptString[i].equals("*"))
					dc[j][a] = '\u0000'; //remove any of the above characters if they are present in the original string
				else{
					dc[j][a] = d.charAt(i); //Fill array dc
					i++;
				}
			}
		}
		
		//read each character from the 2D array row by row to retrieve the decrypted message.
		for(int r=0; r<row; r++){
			for(int c=0; c < column; c++){
				message = message + String.valueOf(dc[r][c]);  //filling decrypted message with the contents of the array one ROW at a time
			}
		}
		return message;
	} //decrypt
}